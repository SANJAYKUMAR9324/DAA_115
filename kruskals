#include <iostream>
#include <vector>
#include <algorithm>

class Edge {
public:
    int src, dest, weight;
};

class Graph {
public:
    int V, E;
    std::vector<Edge> edges;

    Graph(int v, int e) : V(v), E(e) {}
    
    void addEdge(int src, int dest, int weight) {
        Edge edge;
        edge.src = src;
        edge.dest = dest;
        edge.weight = weight;
        edges.push_back(edge);
    }

    static bool compareEdges(const Edge& edge1, const Edge& edge2) {
        return edge1.weight < edge2.weight;
    }

    void kruskalMST() {
        std::sort(edges.begin(), edges.end(), compareEdges);

        std::vector<int> parent(V, -1);
        std::vector<Edge> mst;

        for (const Edge& edge : edges) {
            int srcParent = findParent(parent, edge.src);
            int destParent = findParent(parent, edge.dest);

            if (srcParent != destParent) {
                mst.push_back(edge);
                unionSets(parent, srcParent, destParent);
            }
        }

        std::cout << "Minimum Spanning Tree:\n";
        for (const Edge& edge : mst) {
            std::cout << edge.src << " - " << edge.dest << " : " << edge.weight << "\n";
        }
    }

    int findParent(const std::vector<int>& parent, int vertex) {
        if (parent[vertex] == -1)
            return vertex;
        return findParent(parent, parent[vertex]);
    }

    void unionSets(std::vector<int>& parent, int src, int dest) {
        parent[src] = dest;
    }
};

int main() {
    int V = 4, E = 5;
    Graph graph(V, E);

    graph.addEdge(0, 1, 10);
    graph.addEdge(0, 2, 6);
    graph.addEdge(0, 3, 5);
    graph.addEdge(1, 3, 15);
    graph.addEdge(2, 3, 4);

    graph.kruskalMST();

    return 0;
}
